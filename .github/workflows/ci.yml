name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: sum
          POSTGRES_PASSWORD: sum123
          POSTGRES_DB: sum_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_simple.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: postgresql://sum:sum123@localhost:5432/sum_test
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements_simple.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        # Start the services
        docker-compose -f docker-compose-simple.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run performance test
        python demo_simplicity_wins.py
        
        # Check if simple version is faster
        if [ $? -eq 0 ]; then
          echo "‚úÖ Performance test passed - Simple version is faster!"
        else
          echo "‚ùå Performance test failed"
          exit 1
        fi

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker images
      run: |
        docker build -f Dockerfile.simple -t sum-simple:test .
        docker build -f Dockerfile.intelligence -t sum-intelligence:test .
    
    - name: Test Docker images
      run: |
        # Test simple version
        docker run -d -p 3000:3000 --name sum-simple-test sum-simple:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop sum-simple-test
        
        echo "‚úÖ Docker images built successfully"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run linters
      run: |
        # Check code style
        black --check sum_simple.py sum_intelligence.py
        
        # Check imports
        isort --check-only sum_simple.py sum_intelligence.py
        
        # Check for common issues
        flake8 sum_simple.py sum_intelligence.py --max-line-length=100
        
        # Type checking
        mypy sum_simple.py sum_intelligence.py --ignore-missing-imports

  deploy:
    runs-on: ubuntu-latest
    needs: [test, performance, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "üöÄ Ready to deploy!"
        echo "This is where you'd deploy to production"
        echo "But for now, we'll just celebrate the simplicity"
        echo ""
        echo "Lines of code: $(wc -l sum_simple.py sum_intelligence.py | tail -1 | awk '{print $1}')"
        echo "Dependencies: $(wc -l requirements_simple.txt)"
        echo ""
        echo "‚úÖ Deployment ready - Simple wins!"