name: SUM Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install spaCy model
      run: python -m spacy download en_core_web_sm
      
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type check with mypy
      run: mypy --ignore-missing-imports *.py
      continue-on-error: true
      
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Docker Build and Test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/sum
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/sum:latest python -c "import SUM; print('‚úì SUM imports successfully')"

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: Run performance benchmarks
      run: |
        pytest tests/test_performance.py --benchmark-json=benchmark.json
        
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying SUM to staging environment"
        # In real deployment, this would connect to your staging infrastructure
        # kubectl apply -f k8s/staging/
        # or terraform apply -var-file="staging.tfvars"
        # or your preferred deployment method
        
    - name: Run health checks
      run: |
        echo "üîç Running health checks on staging deployment"
        # curl -f http://staging.sum-ai.com/health || exit 1
        # python tests/integration/test_staging.py
        
    - name: Run smoke tests
      run: |
        echo "üí® Running smoke tests"
        # pytest tests/smoke/ --staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Blue-Green Deployment
      run: |
        echo "üîÑ Starting blue-green deployment to production"
        
        # Deploy new version (green)
        # kubectl apply -f k8s/production/
        # kubectl set image deployment/sum-api sum-api=${{ secrets.DOCKER_USERNAME }}/sum:${{ github.event.release.tag_name }}
        
        # Wait for rollout
        # kubectl rollout status deployment/sum-api --timeout=600s
        
        echo "‚úÖ Production deployment completed"
        
    - name: Production health checks
      run: |
        echo "üîç Running production health checks"
        # curl -f https://api.sum-ai.com/health || exit 1
        # python tests/integration/test_production.py
        
    - name: Update monitoring dashboards
      run: |
        echo "üìä Updating monitoring dashboards for new release"
        # Update Grafana dashboards, alerts, etc.
        
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        text: 'üéâ SUM ${{ github.event.release.tag_name }} deployed to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'release'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back production deployment"
        # kubectl rollout undo deployment/sum-api
        # kubectl rollout status deployment/sum-api --timeout=300s
        
    - name: Notify team of rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#alerts'
        text: '‚ö†Ô∏è SUM production deployment rolled back due to failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Clean up old Docker images
      run: |
        echo "üßπ Cleaning up old Docker images"
        # docker system prune -f
        
    - name: Clean up staging resources
      run: |
        echo "üßπ Cleaning up unused staging resources"
        # kubectl delete pods --field-selector=status.phase=Succeeded -n staging